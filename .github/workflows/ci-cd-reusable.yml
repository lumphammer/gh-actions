name: CI/CD

on:
  workflow_call:
    inputs:
      manifest_file_name:
        required: true
        type: string
        description: 'The name of the manifest file, e.g. `module.json`'
      package_id:
        required: true
        type: string
        description: 'The Foundry ID of the package, e.g. `my-graet-module`'
      foundry_package_release:
        required: true
        type: boolean
        description: >
          Whether to release to Foundry - only do this for packages that have
          been submitted to and acceptred by Foundry. If this is set to `true`,
          the `FOUNDRY_PACKAGE_RELEASE_TOKEN` secret must be set. You can also
          set the `foundry_package_release_dry_run` input to `true` to test
          release without actually releasing.
      release_to_bucket:
        required: true
        type: boolean
        description: >
          Whether to release to a DO bucket. If this is set to `true`, the
          `DO_ACCESS_KEY` and `DO_SECRET_KEY` secrets must be set. You can also
          set the `do_space_name` and `do_space_region` inputs to override the
          defaults (`lumphammer-fvtt-packages` and `lon1` respectively).

      runs_on:
        required: false
        type: string
        default: "ubuntu-latest"
      build_path:
        required: false
        type: string
        default: "build"
        description: >
          Relative path from the root of the repo to the directory where the
          built files are stored, e.g. `build`.
      public_path:
        required: false
        type: string
        default: "public"
        description: >
          Relative path from the root of the repo to the directory where static
          assets are stored, e.g. `public`.
      pnpm_version:
        required: false
        type: string
        default: "9"
        description: 'The version of pnpm to use, e.g. `9`'
      package_path:
        required: false
        type: string
        default: "build_package"
        description: >
          Relative path from the root of the repo to the directory where built
          package zip files are stored, e.g. `build_package`.
      foundry_package_release_dry_run:
        required: false
        type: boolean
        default: false
        description: >
          Whether to run Foundry release in dry-run mode. This will not actually
          release the package to Foundry but checks that your key is valid and
          that Foundry is happy.
      do_space_name:
        type: string
        required: false
        default: lumphammer-fvtt-packages
        description: >
          The name of the DO space to upload to.
      do_space_region:
        type: string
        required: false
        default: lon1
        description: >
          The region of the DO space to upload to.
      changelog_file_name:
        type: string
        required: false
        default: CHANGELOG.md
        description: >
          The name of the changelog file, e.g. `CHANGELOG.md`. This is only used
          when `release_to_bucket` is set to `true` and a non-prerelease tag is
          pushed.
      readme_file_name:
        type: string
        required: false
        default: README.md
        description: >
          The name of the readme file, e.g. `README.md`. This is only used when
          `release_to_bucket` is set to `true` and a non-prerelease tag is
          pushed.
    secrets:
      FOUNDRY_PACKAGE_RELEASE_TOKEN:
        required: false
        description: >
          The Foundry API token to use when releasing to Foundry. This is only
          used when `foundry_package_release` is set to `true`.
      DO_ACCESS_KEY:
        required: false
        description: >
          The DigitalOcean access key to use when releasing to a DO bucket. This
          is only used when `release_to_bucket` is set to `true`.
      DO_SECRET_KEY :
        required: false
        description: >
          The DigitalOcean secret key to use when releasing to a DO bucket. This
          is only used when `release_to_bucket` is set to `true`.

env:
  MANIFEST_FILE_NAME: ${{ inputs.manifest_file_name }}
  PUBLIC_PATH: ${{ inputs.public_path }}
  PACKAGE_FILE_NAME: ${{ inputs.package_id }}.zip
  PACKAGE_PATH: ${{ inputs.package_path }}
  DOWNLOAD_BASE_GH: "https://github.com/${{github.repository}}/releases/download"
  DOWNLOAD_BASE_DO: "https://${{inputs.do_space_name}}.${{inputs.do_space_region}}.cdn.digitaloceanspaces.com/${{inputs.package_id}}/releases"

jobs:
  parse_tag:
    name: Parse tag
    runs-on: ${{ inputs.runs_on }}
    outputs:
      tag_version: ${{ steps.get_tag_version.outputs.group1 }}
      tag_prerelease: ${{ steps.get_tag_version.outputs.group2 }}
      manifest_url: ${{inputs.release_to_bucket && env.DOWNLOAD_BASE_DO || env.DOWNLOAD_BASE_GH}}/${{steps.get_tag_version.outputs.group1}}/${{inputs.manifest_file_name}}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Get tag versions
        if: github.ref_type == 'tag'
        id: get_tag_version
        uses: actions-ecosystem/action-regex-match@v2
        with:
          regex: '^refs/tags\/(v\d+\.\d+\.\d+(?:$|(-[a-z0-9._-]+)))'
          text: ${{ github.ref }}

  instrument_parsed_tag:
    name: Instrument parsed tag
    runs-on: ${{ inputs.runs_on }}
    needs: parse_tag
    steps:
      - name: Instrument tags capture
        run: |
          echo "tag_version: ${{ needs.parse_tag.outputs.tag_version }}"
          echo "tag_prerelease: ${{ needs.parse_tag.outputs.tag_prerelease }}"

  build:
    name: Build
    runs-on: ${{ inputs.runs_on }}
    needs: parse_tag
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'

      - name: Activate pnpm
        run: |
          corepack enable
          corepack prepare pnpm@${{ inputs.pnpm_version }} --activate

      - name: Instrumentation
        run: |
          pwd
          ls -l
          cat tsconfig.json
          export
          node --version
          pnpm --version

      - name: Install dependencies
        run: pnpm install

      - name: Instrument tsc version
        run: npx tsc --version

      - name: Update manifest
        if: needs.parse_tag.outputs.tag_version != ''
        uses: lumphammer/gh-actions/.github/actions/update-manifest@2024-10-18.1
        with:
          manifest_path: ${{ env.PUBLIC_PATH }}/${{ env.MANIFEST_FILE_NAME }}
          release_to_bucket: yes
          tag: ${{ needs.parse_tag.outputs.tag_version }}
          do_space_name: ${{ inputs.do_space_name }}
          do_space_region: ${{ inputs.do_space_region }}

      - name: Typecheck
        run: pnpm run typecheck

      - name: Test
        run: pnpm test

      - name: Lint
        run: pnpm run lint:check

      - name: Check formatting
        run: pnpm run format:check

      - name: Build
        run: pnpm run build

      - name: Create FVTT package zip
        run: |
          mkdir -p ${{ env.PACKAGE_PATH }}
          cd ${{inputs.build_path}}
          zip -r ${{github.workspace}}/${{ env.PACKAGE_PATH }}/${{ env.PACKAGE_FILE_NAME }} .
          ls -l ${{github.workspace}}/${{ env.PACKAGE_PATH }}/${{ env.PACKAGE_FILE_NAME }}

      - name: Upload package file
        uses: actions/upload-artifact@v4
        with:
          name: package-zip
          if-no-files-found: error
          path: ${{env.PACKAGE_PATH}}/${{env.PACKAGE_FILE_NAME}}

      - name: Upload manifest
        uses: actions/upload-artifact@v4
        with:
          name: manifest
          if-no-files-found: error
          path: ${{env.PUBLIC_PATH}}/${{env.MANIFEST_FILE_NAME}}

      - name: Upload CHANGELOG
        uses: actions/upload-artifact@v4
        if: inputs.release_to_bucket && needs.parse_tag.outputs.tag_version != '' && needs.parse_tag.outputs.tag_prerelease == ''
        with:
          name: changelog
          if-no-files-found: error
          path: ${{inputs.changelog_file_name}}

      - name: Upload README
        uses: actions/upload-artifact@v4
        if: inputs.release_to_bucket && needs.parse_tag.outputs.tag_version != '' && needs.parse_tag.outputs.tag_prerelease == ''
        with:
          name: readme
          if-no-files-found: error
          path: ${{inputs.readme_file_name}}


  upload-to-bucket:
    name: Upload to bucket
    needs:
      - build
      - parse_tag
    if: needs.parse_tag.outputs.tag_version != '' && inputs.release_to_bucket
    runs-on: ${{ inputs.runs_on }}
    permissions:
      contents: write
    steps:
      - name: Instrument
        run: |
          echo "needs.parse_tag.outputs.tag_version: ${{ needs.parse_tag.outputs.tag_version }}"
          echo "inputs.release_to_bucket: ${{ inputs.release_to_bucket }}"
          echo "is_tag_and_bucket: $is_tag_and_bucket"
          echo "is_not_prerelease: $is_not_prerelease"

      - name: Download package
        uses: actions/download-artifact@v4
        with:
          name: package-zip

      - name: Download manifest
        uses: actions/download-artifact@v4
        with:
          name: manifest

      - id: upload_version
        name: Upload to bucket (version)
        uses: BetaHuhn/do-spaces-action@v2
        with:
          access_key: ${{ secrets.DO_ACCESS_KEY}}
          secret_key: ${{ secrets.DO_SECRET_KEY }}
          space_name: ${{ inputs.do_space_name }}
          space_region: ${{ inputs.do_space_region }}
          source: .
          out_dir: ${{inputs.package_id}}/releases/${{needs.parse_tag.outputs.tag_version}}

      # we download CHANGELOG and README here because they're not needed for prereleases
      - name: Download CHANGELOG
        if: needs.parse_tag.outputs.tag_prerelease == ''
        uses: actions/download-artifact@v4
        with:
          name: changelog

      - name: Download README
        if: needs.parse_tag.outputs.tag_prerelease == ''
        uses: actions/download-artifact@v4
        with:
          name: readme

      - id: upload_latest
        name: Upload to bucket (latest)
        if: needs.parse_tag.outputs.tag_prerelease == ''
        uses: BetaHuhn/do-spaces-action@v2
        with:
          access_key: ${{ secrets.DO_ACCESS_KEY}}
          secret_key: ${{ secrets.DO_SECRET_KEY }}
          space_name: ${{ inputs.do_space_name }}
          space_region: ${{ inputs.do_space_region }}
          source: .
          out_dir: ${{inputs.package_id}}/releases/latest

  instrumentation:
    name: Instrumentation
    needs:
      - build
      - parse_tag
      - upload-to-bucket
    runs-on: ${{ inputs.runs_on }}
    permissions:
      contents: write
    if: always()
    steps:
      - run: |
          echo "needs.parse_tag.outputs.tag_version: ${{ needs.parse_tag.outputs.tag_version }}"
          echo "needs.parse_tag.outputs.tag_prerelease: ${{ needs.parse_tag.outputs.tag_prerelease }}"
          echo "needs.upload-to-bucket.result: ${{ needs.upload-to-bucket.result }}"
          echo "needs.parse_tag.outputs.tag_version != '': ${{ needs.parse_tag.outputs.tag_version != '' }}"
          echo "needs.parse_tag.outputs.tag_prerelease != '': ${{ needs.parse_tag.outputs.tag_prerelease != '' }}"
          echo "needs.upload-to-bucket.result == 'success': ${{ needs.upload-to-bucket.result == 'success' }}"
          echo "needs.upload-to-bucket.result == 'skipped': ${{ needs.upload-to-bucket.result == 'skipped' }}"
          echo "needs.upload-to-bucket.result == 'success' || needs.upload-to-bucket.result == 'skipped': ${{ needs.upload-to-bucket.result == 'success' || needs.upload-to-bucket.result == 'skipped' }}"
          echo "needs.parse_tag.outputs.tag_version != '' && needs.parse_tag.outputs.tag_prerelease != '' && (needs.upload-to-bucket.result == 'success' || needs.upload-to-bucket.result == 'skipped'): ${{ needs.parse_tag.outputs.tag_version != '' && needs.parse_tag.outputs.tag_prerelease != '' && (needs.upload-to-bucket.result == 'success' || needs.upload-to-bucket.result == 'skipped') }}"


  publish-prerelease:
    name: Publish prerelease
    needs:
      - build
      - parse_tag
      - upload-to-bucket
    runs-on: ${{ inputs.runs_on }}
    permissions:
      contents: write
    if: needs.parse_tag.outputs.tag_version != '' && needs.parse_tag.outputs.tag_prerelease != '' && (needs.upload-to-bucket.result == 'success' || needs.upload-to-bucket.result == 'skipped')
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: publish
        uses: lumphammer/gh-actions/.github/actions/publish@2024-10-18.1
        with:
          version: ${{needs.parse_tag.outputs.tag_version}}
          prerelease: ${{needs.parse_tag.outputs.tag_prerelease}}
          package_file_name: ${{env.PACKAGE_FILE_NAME}}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          manifest_url: ${{needs.parse_tag.outputs.manifest_url}}
          manifest_file_name: ${{env.MANIFEST_FILE_NAME}}

  publish-release:
    name: Publish release
    needs:
      - build
      - parse_tag
      - upload-to-bucket
    runs-on: ${{ inputs.runs_on }}
    permissions:
      contents: write
    if: needs.parse_tag.outputs.tag_version != '' && needs.parse_tag.outputs.tag_prerelease == '' && (needs.upload-to-bucket.result == 'success' || needs.upload-to-bucket.result == 'skipped')
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: publish
        uses: lumphammer/gh-actions/.github/actions/publish@2024-10-18.1
        with:
          version: ${{needs.parse_tag.outputs.tag_version}}
          prerelease: ${{needs.parse_tag.outputs.tag_prerelease}}
          package_file_name: ${{env.PACKAGE_FILE_NAME}}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          manifest_url: ${{needs.parse_tag.outputs.manifest_url}}
          manifest_file_name: ${{env.MANIFEST_FILE_NAME}}


  publish-to-foundry:
    name: Publish to Foundry
    needs:
      - publish-release
      - parse_tag
    if: needs.publish-release.result == 'success' && inputs.foundry_package_release
    runs-on: ${{ inputs.runs_on }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: publish
        uses: cs96and/FoundryVTT-release-package@v1
        with:
          package-token: ${{secrets.FOUNDRY_PACKAGE_RELEASE_TOKEN}}
          manifest-url: ${{needs.parse_tag.outputs.manifest_url}}
          dry-run: ${{inputs.foundry_package_release_dry_run}}